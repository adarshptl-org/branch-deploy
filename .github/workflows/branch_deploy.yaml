name: "branch deploy demo"

# The workflow to execute on is comments that are newly created
on:
  issue_comment:
    types: [created]

# Permissions needed for reacting and adding comments for IssueOps commands
permissions:
  pull-requests: write
  deployments: write
  contents: write
  checks: read
  statuses: read

jobs:
  demo:
    if: ${{ github.event.issue.pull_request }} # only run on pull request comments
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials 2
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SECRET_TOKEN }}
      - name: Terraform plan
        id: plan
        timeout-minutes: 30
        run: terraform plan
        # continue-on-error: true
        working-directory: ${{ env.working-directory }}
        env:
          TF_VAR_test_var: "my-github-actions-role"
          TF_CLI_ARGS_plan: ${{ vars.TF_CLI_ARGS_plan }}
          TF_CLI_ARGS: ${{ vars.TF_CLI_ARGS }}
          ARM_SAS_TOKEN: ${{ secrets.ARM_SAS_TOKEN }}
          ARM_CLIENT_ID: ${{ fromJSON(vars.AZURE_OIDC).clientId }}
          ARM_SUBSCRIPTION_ID: ${{ fromJSON(vars.AZURE_OIDC).subscriptionId }}
          ARM_TENANT_ID: ${{ fromJSON(vars.AZURE_OIDC).tenantId }}
      # Execute IssueOps branch deployment logic, hooray!
      # This will be used to "gate" all future steps below and conditionally trigger steps/deployments
      - uses: github/branch-deploy@v9.6.0
        id: branch-deploy
        with:
          trigger: ".deploy"

      # Run your deployment logic for your project here - examples seen below

      # Checkout your projects repository based on the ref provided by the branch-deploy step
      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch-deploy.outputs.ref }}

      # Do some fake "noop" deployment logic here
      # conditionally run a noop deployment
      - name: fake noop deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop == 'true' }}
        run: echo "I am doing a fake noop deploy"

      # Do some fake "regular" deployment logic here
      # conditionally run a regular deployment
      - name: fake regular deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' }}
        run: echo "I am doing a fake regular deploy"
